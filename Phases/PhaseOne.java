import java.util.List;

public class PhaseOne {
    public static void main(String... args) {
        // default variable options
        int generationCap = 200;
        int populationSize = 30;
        int numOffspring = 10;
        float radioactivity = .25f;
        
        boolean help = false;
        
        // process command line arguments
        for (int index = 0; index < args.length; ++index) {
            if (args[index].equals("--generation-cap") || args[index].equals("-g"))
                generationCap = Integer.parseInt(args[++index]);
            
            if (args[index].equals("--population-size") || args[index].equals("-p"))
                populationSize = Integer.parseInt(args[++index]);
            
            if (args[index].equals("--offspring-num") || args[index].equals("-o"))
                numOffspring = Integer.parseInt(args[++index]);
            
            if (args[index].equals("--radioactivity") || args[index].equals("-r"))
                radioactivity = Float.parseFloat(args[++index]);
            
            if (args[index].equals("--help") || args[index].equals("-h"))
                help = true;
        }
        
        // display help
        if (help) {
            // Usage
            System.out.println("Usage: [std input] | java PhaseOne [options]");
            
            // Flags
            System.out.println(" -h, --help             display help information");
            System.out.println(" -g, --generation-cap   set the number generations before top-ranking genome is selected");
            System.out.println(" -p, --population-size  set the number of parent genomes in population");
            System.out.println(" -o, --offspring-num    set the number of offspring generated by each member of the population");
            System.out.println(" -r, --radioactivity    set the probability of a random mutation occuring during reproduction\n");
            
            // Defaults
            System.out.println("Defaults:");
            System.out.format(" java PhaseOne -g %d -p %d -o %d -r %.2f\n", generationCap, populationSize, numOffspring, radioactivity);
            
            // Example
            System.out.println("\nExamples:");
            System.out.println(" cat inputfile.csv | java PhaseOne          process inputfile.csv with default settings");
            System.out.println(" cat inputfile.csv | java PhaseOne -g 100   returns the best-fit genome if the best-fit genome\n" +
                               "                                            remains the same for 100 generations");
            System.out.println(" cat inputfile.csv | java PhaseOne -p 100   retains information for a population 100 genomes");
            System.out.println(" cat inputfile.csv | java PhaseOne -o 20    every two members of the population generates 20 offspring");
            System.out.println(" cat inputfile.csv | java PhaseOne -r .50   50% chance of a random mutation in every child genome\n");
        }
        else {
            // read items
            int capacity = PhaseLib.readCapacity();
            List<Node> items = PhaseLib.readItems();
            
            // create genome
            PhaseLib.generationNum.setGenerationCap(generationCap);
            Genome mostFit = PhaseLib.evolve(items, capacity, populationSize, 
                                             numOffspring, radioactivity, 
                                             PhaseLib.generationNum);
            
            // display genome information
            System.out.println("Bit String: " + mostFit.genome);
            
            System.out.print("\nName:     ");
            for (Node item : items)
                System.out.format("%4s", item.name);
            
            System.out.print("\nValue:    ");
            for (Node item : items)
                System.out.format("%4d", item.value);
            
            System.out.print("\nCost:     ");
            for (Node item : items)
                System.out.format("%4d", item.cost);
            
            System.out.print("\nSelected: ");
            for (int index = 0; index < items.size(); ++index) {
                System.out.print(mostFit.genome.get(index) ? "   ^" : "    ");
            }
            
            // display value and cost        
            System.out.println("\n\nTotal Value: " + mostFit.getValue());
        }
    }
}